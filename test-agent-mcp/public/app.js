class TestAgent {
    constructor() {
        this.baseUrl = window.location.origin;
        this.init();
    }

    init() {
        this.setupEventListeners();
    }

    setupEventListeners() {
        // –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        document.getElementById('code-form').addEventListener('submit', (e) => {
            e.preventDefault();
            this.submitCode();
        });

        // –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        document.getElementById('file-form').addEventListener('submit', (e) => {
            e.preventDefault();
            this.submitFile();
        });

        // Drag & Drop –¥–ª—è —Ñ–∞–π–ª–æ–≤
        const fileUpload = document.getElementById('file-upload');
        const fileInput = document.getElementById('file-input');

        fileUpload.addEventListener('click', () => fileInput.click());
        fileUpload.addEventListener('dragover', this.handleDragOver.bind(this));
        fileUpload.addEventListener('dragleave', this.handleDragLeave.bind(this));
        fileUpload.addEventListener('drop', this.handleDrop.bind(this));

        fileInput.addEventListener('change', (e) => {
            if (e.target.files.length > 0) {
                this.updateFileUploadUI(e.target.files[0]);
                document.querySelector('#file-form .btn').disabled = false;
            }
        });

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ –∫–æ–¥—É
        document.getElementById('code').addEventListener('input', this.detectAndDisplayLanguage.bind(this));
    }

    switchTab(tabName) {
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
        document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        document.querySelector(`[onclick="switchTab('${tabName}')"]`).classList.add('active');
        document.getElementById(`${tabName}-tab`).classList.add('active');
    }

    handleDragOver(e) {
        e.preventDefault();
        e.currentTarget.classList.add('dragover');
    }

    handleDragLeave(e) {
        e.preventDefault();
        e.currentTarget.classList.remove('dragover');
    }

    handleDrop(e) {
        e.preventDefault();
        e.currentTarget.classList.remove('dragover');
        
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            document.getElementById('file-input').files = files;
            this.updateFileUploadUI(files[0]);
            document.querySelector('#file-form .btn').disabled = false;
        }
    }

    updateFileUploadUI(file) {
        const fileUpload = document.getElementById('file-upload');
        fileUpload.innerHTML = `
            <div style="font-size: 3rem; margin-bottom: 15px;">üìÑ</div>
            <p style="font-size: 1.2rem; margin-bottom: 10px;">${file.name}</p>
            <p style="color: #718096;">–†–∞–∑–º–µ—Ä: ${this.formatFileSize(file.size)}</p>
        `;
    }

    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    detectAndDisplayLanguage() {
        const code = document.getElementById('code').value;
        const detectedLanguageDiv = document.getElementById('detected-language');
        
        if (!code.trim()) {
            detectedLanguageDiv.textContent = '';
            return null;
        }

        // –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É
        const patterns = {
            javascript: [/function\s+\w+/, /const\s+\w+\s*=/, /let\s+\w+\s*=/, /var\s+\w+\s*=/, /=>\s*{/, /console\.log/, /require\s*\(/, /import\s+.*from/],
            python: [/def\s+\w+\s*\(/, /import\s+\w+/, /from\s+\w+\s+import/, /print\s*\(/, /if\s+__name__\s*==\s*['"]__main__['"]/, /class\s+\w+.*:/],
            java: [/public\s+class\s+\w+/, /public\s+static\s+void\s+main/, /System\.out\.println/, /private\s+\w+/, /public\s+\w+/, /import\s+java/],
            go: [/func\s+\w+\s*\(/, /package\s+\w+/, /import\s+['"]/, /fmt\.Print/, /var\s+\w+\s+\w+/, /func\s+main\s*\(/],
            ruby: [/def\s+\w+/, /class\s+\w+/, /puts\s+/, /require\s+['"]/, /end$/m, /\@\w+/, /attr_accessor/],
            php: [/<\?php/, /function\s+\w+\s*\(/, /echo\s+/, /\$\w+\s*=/, /class\s+\w+/, /namespace\s+\w+/],
            csharp: [/public\s+class\s+\w+/, /using\s+System/, /Console\.WriteLine/, /public\s+static\s+void\s+Main/, /namespace\s+\w+/, /public\s+static/],
            rust: [/fn\s+\w+\s*\(/, /let\s+\w+\s*=/, /println!/, /use\s+\w+/, /struct\s+\w+/, /impl\s+\w+/, /fn\s+main\s*\(/]
        };

        let detectedLanguage = null;
        let maxMatches = 0;

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
        for (const [lang, langPatterns] of Object.entries(patterns)) {
            const matches = langPatterns.filter(pattern => pattern.test(code)).length;
            if (matches > maxMatches) {
                maxMatches = matches;
                detectedLanguage = lang;
            }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        const filename = document.getElementById('filename').value;
        if (filename && !detectedLanguage) {
            detectedLanguage = this.detectLanguageFromFilename(filename);
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (detectedLanguage && detectedLanguage !== 'unknown') {
            const languageNames = {
                javascript: 'JavaScript',
                python: 'Python',
                java: 'Java',
                go: 'Go',
                ruby: 'Ruby',
                php: 'PHP',
                csharp: 'C#',
                rust: 'Rust'
            };
            detectedLanguageDiv.textContent = `üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω —è–∑—ã–∫: ${languageNames[detectedLanguage]}`;
        } else {
            detectedLanguageDiv.textContent = '‚ùì –Ø–∑—ã–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (–±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ)';
        }

        return detectedLanguage;
    }

    detectLanguageFromFilename(filename) {
        const ext = filename.split('.').pop()?.toLowerCase();
        const languageMap = {
            'js': 'javascript',
            'jsx': 'javascript',
            'ts': 'javascript',
            'tsx': 'javascript',
            'py': 'python',
            'java': 'java',
            'go': 'go',
            'rb': 'ruby',
            'php': 'php',
            'cs': 'csharp',
            'rs': 'rust'
        };
        return languageMap[ext] || 'unknown';
    }

    async submitCode() {
        const code = document.getElementById('code').value;
        const filename = document.getElementById('filename').value;

        if (!code.trim()) {
            this.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        let detectedLanguage = this.detectAndDisplayLanguage();
        
        // –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        if (!detectedLanguage || detectedLanguage === 'unknown') {
            detectedLanguage = null; // –°–µ—Ä–≤–µ—Ä —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç
        }

        this.showLoading();

        try {
            const requestBody = {
                code: code,
                filename: filename
            };

            // –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
            if (detectedLanguage) {
                requestBody.language = detectedLanguage;
            }

            const response = await fetch(`${this.baseUrl}/api/test-code`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            });

            const data = await response.json();
            this.hideLoading();

            if (data.success) {
                this.showResults(data.data);
            } else {
                this.showError(data.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤');
            }
        } catch (error) {
            this.hideLoading();
            this.showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
            console.error('Error:', error);
        }
    }

    async submitFile() {
        const fileInput = document.getElementById('file-input');
        const file = fileInput.files[0];

        if (!file) {
            this.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª');
            return;
        }

        this.showLoading();

        try {
            const formData = new FormData();
            formData.append('file', file);

            const response = await fetch(`${this.baseUrl}/api/test-file`, {
                method: 'POST',
                body: formData
            });

            const data = await response.json();
            this.hideLoading();

            if (data.success) {
                this.showResults(data.data);
            } else {
                this.showError(data.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞');
            }
        } catch (error) {
            this.hideLoading();
            this.showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
            console.error('Error:', error);
        }
    }

    getFileExtension(language) {
        const extensions = {
            javascript: 'js',
            python: 'py',
            java: 'java',
            go: 'go',
            ruby: 'rb',
            php: 'php',
            csharp: 'cs',
            rust: 'rs'
        };
        return extensions[language] || 'txt';
    }

    showLoading() {
        document.getElementById('loading').style.display = 'block';
        document.getElementById('results').style.display = 'none';
        this.clearMessages();
    }

    hideLoading() {
        document.getElementById('loading').style.display = 'none';
    }

    showResults(data) {
        const resultsDiv = document.getElementById('results');
        const resultsContent = document.getElementById('results-content');
        
        let html = '';

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–¥–µ
        if (data.codeInfo) {
            html += `
                <div class="result-card">
                    <div class="result-header">
                        <div class="result-title">üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–¥–µ</div>
                        <div class="result-status status-success">–û–±—Ä–∞–±–æ—Ç–∞–Ω</div>
                    </div>
                    <p><strong>–Ø–∑—ã–∫:</strong> ${data.codeInfo.language}</p>
                    <p><strong>–§–∞–π–ª:</strong> ${data.codeInfo.filename}</p>
                    <p><strong>–§—É–Ω–∫—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ:</strong> ${data.codeInfo.functionsCount || 0}</p>
                </div>
            `;
        }

        // –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        if (data.generatedTests) {
            const testId = 'test-code-' + Date.now();
            const filename = data.codeInfo ? this.getTestFilename(data.codeInfo.filename, data.codeInfo.language) : 'test.js';
            
            html += `
                <div class="result-card">
                    <div class="code-header">
                        <div class="result-title">üß™ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã</div>
                        <div class="code-actions">
                            <button class="btn-small" onclick="testAgent.copyToClipboard('${testId}')">
                                üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                            </button>
                            <button class="btn-small btn-success" onclick="testAgent.downloadTestFile('${testId}', '${filename}')">
                                üíæ –°–∫–∞—á–∞—Ç—å
                            </button>
                            <button class="btn-small btn-run" onclick="testAgent.runTests('${testId}', '${data.codeInfo.language}')" id="run-tests-btn">
                                üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å
                            </button>
                        </div>
                    </div>
                    <pre class="code-block" id="${testId}"><code class="language-${data.codeInfo.language}">${this.escapeHtml(data.generatedTests)}</code></pre>
                </div>
            `;
        }

        // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        if (data.testResults) {
            const isSuccess = data.testResults.success;
            const testsRun = this.parseTestResults(data.testResults.output);
            const formattedOutput = this.formatTestOutput(data.testResults.output);
            
            html += `
                <div class="result-card">
                    <div class="result-header">
                        <div class="result-title">üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</div>
                        <div class="result-status ${isSuccess ? 'status-success' : 'status-error'}">
                            ${isSuccess ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∏'}
                        </div>
                    </div>
                    
                    <div class="test-results-grid">
                        <div class="test-stat stat-total">
                            <div class="test-stat-number">${testsRun.total}</div>
                            <div class="test-stat-label">–¢–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</div>
                        </div>
                        <div class="test-stat stat-success">
                            <div class="test-stat-number">${testsRun.passed}</div>
                            <div class="test-stat-label">–£—Å–ø–µ—à–Ω—ã—Ö</div>
                        </div>
                        <div class="test-stat stat-error">
                            <div class="test-stat-number">${testsRun.failed}</div>
                            <div class="test-stat-label">–ù–µ—É–¥–∞—á–Ω—ã—Ö</div>
                        </div>
                    </div>
                    
                    ${formattedOutput ? `
                        <div class="test-output-container">
                            <div class="test-output-header">
                                <span class="test-output-title">üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥</span>
                                <button class="btn-small" onclick="testAgent.toggleTestOutput()" id="toggle-output-btn">
                                    üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å
                                </button>
                            </div>
                            <div class="test-output collapsed" id="test-output">${formattedOutput}</div>
                        </div>
                    ` : ''}
                </div>
            `;
        }

        // –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–æ–≤
        if (data.testUrl) {
            html += `
                <div class="result-card">
                    <div class="result-header">
                        <div class="result-title">üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–æ–≤</div>
                        <div class="result-status status-success">–î–æ—Å—Ç—É–ø–µ–Ω</div>
                    </div>
                    <p>–¢–µ—Å—Ç—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ —Å—Å—ã–ª–∫–µ:</p>
                    <a href="${data.testUrl}" target="_blank" class="test-link">
                        üöÄ –û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                    </a>
                </div>
            `;
        }

        resultsContent.innerHTML = html;
        resultsDiv.style.display = 'block';

        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        Prism.highlightAll();
    }

    showError(message) {
        this.clearMessages();
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message';
        errorDiv.textContent = message;
        document.querySelector('.main-card').appendChild(errorDiv);
    }

    showSuccess(message) {
        this.clearMessages();
        const successDiv = document.createElement('div');
        successDiv.className = 'success-message';
        successDiv.textContent = message;
        document.querySelector('.main-card').appendChild(successDiv);
    }

    clearMessages() {
        document.querySelectorAll('.error-message, .success-message').forEach(el => el.remove());
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    getTestFilename(originalFilename, language) {
        if (!originalFilename) {
            const ext = this.getFileExtension(language);
            return `test.${ext}`;
        }
        
        const parts = originalFilename.split('.');
        const ext = parts.pop();
        const name = parts.join('.');
        return `${name}.test.${ext}`;
    }

    parseTestResults(output) {
        if (!output) return { total: 0, passed: 0, failed: 0 };
        
        // –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤
        let total = 0, passed = 0, failed = 0;
        
        // Jest/JavaScript
        const jestMatch = output.match(/(\d+) passing|Tests:\s+(\d+) passed|‚úì (\d+)|‚úó (\d+)/g);
        if (jestMatch) {
            jestMatch.forEach(match => {
                const passedMatch = match.match(/(\d+) passing|Tests:\s+(\d+) passed|‚úì (\d+)/);
                const failedMatch = match.match(/‚úó (\d+)/);
                if (passedMatch) passed += parseInt(passedMatch[1] || passedMatch[2] || passedMatch[3] || 0);
                if (failedMatch) failed += parseInt(failedMatch[1] || 0);
            });
        }
        
        // Python pytest
        const pytestMatch = output.match(/(\d+) passed|passed, (\d+) failed|(\d+) failed/);
        if (pytestMatch) {
            if (pytestMatch[1]) passed = parseInt(pytestMatch[1]);
            if (pytestMatch[2]) failed = parseInt(pytestMatch[2]);
            if (pytestMatch[3]) failed = parseInt(pytestMatch[3]);
        }
        
        // Go testing
        const goMatch = output.match(/PASS|FAIL/g);
        if (goMatch) {
            passed = (goMatch.filter(m => m === 'PASS')).length;
            failed = (goMatch.filter(m => m === 'FAIL')).length;
        }
        
        total = passed + failed;
        return { total, passed, failed };
    }

    formatTestOutput(output) {
        if (!output) return '';
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        const lines = output.split('\n');
        let formattedLines = [];
        
        for (let line of lines) {
            line = line.trim();
            if (!line) continue;
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å—Ç—Ä–æ–∫
            if (line.includes('‚úì') || line.includes('PASS') || line.includes('passing')) {
                formattedLines.push(`<div class="test-line test-pass">‚úÖ ${this.escapeHtml(line)}</div>`);
            } else if (line.includes('‚úó') || line.includes('FAIL') || line.includes('failed') || line.includes('Error')) {
                formattedLines.push(`<div class="test-line test-fail">‚ùå ${this.escapeHtml(line)}</div>`);
            } else if (line.includes('describe') || line.includes('it(') || line.includes('test(')) {
                formattedLines.push(`<div class="test-line test-describe">üß™ ${this.escapeHtml(line)}</div>`);
            } else if (line.includes('Expected') || line.includes('Actual') || line.includes('at ')) {
                formattedLines.push(`<div class="test-line test-detail">üìã ${this.escapeHtml(line)}</div>`);
            } else if (line.match(/^\s*\d+\)/)) {
                formattedLines.push(`<div class="test-line test-number">üî¢ ${this.escapeHtml(line)}</div>`);
            } else {
                formattedLines.push(`<div class="test-line test-info">${this.escapeHtml(line)}</div>`);
            }
        }
        
        return formattedLines.join('');
    }

    toggleTestOutput() {
        const output = document.getElementById('test-output');
        const btn = document.getElementById('toggle-output-btn');
        
        if (output.classList.contains('collapsed')) {
            output.classList.remove('collapsed');
            btn.textContent = 'üëÅÔ∏è –°–∫—Ä—ã—Ç—å';
        } else {
            output.classList.add('collapsed');
            btn.textContent = 'üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å';
        }
    }

    async copyToClipboard(elementId) {
        const element = document.getElementById(elementId);
        if (!element) return;
        
        const text = element.textContent;
        
        try {
            await navigator.clipboard.writeText(text);
            this.showSuccess('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        } catch (err) {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            const textArea = document.createElement('textarea');
            textArea.value = text;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            this.showSuccess('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        }
    }

    downloadTestFile(elementId, filename) {
        const element = document.getElementById(elementId);
        if (!element) return;
        
        const text = element.textContent;
        const blob = new Blob([text], { type: 'text/plain' });
        const url = window.URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
        
        this.showSuccess(`–§–∞–π–ª ${filename} –∑–∞–≥—Ä—É–∂–µ–Ω!`);
    }

    async runTests(elementId, language) {
        const element = document.getElementById(elementId);
        if (!element) {
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–¥ —Ç–µ—Å—Ç–æ–≤');
            return;
        }

        const testCode = element.textContent;
        const runBtn = document.getElementById('run-tests-btn');
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        if (runBtn) {
            runBtn.disabled = true;
            runBtn.textContent = '‚è≥ –ó–∞–ø—É—Å–∫...';
        }

        try {
            const response = await fetch(`${this.baseUrl}/api/run-tests`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    testCode: testCode,
                    language: language
                })
            });

            const data = await response.json();
            
            if (data.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                this.updateTestResults(data.data);
                this.showSuccess('–¢–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
            } else {
                this.showError(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤');
            }
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
            console.error('Error running tests:', error);
        } finally {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (runBtn) {
                runBtn.disabled = false;
                runBtn.textContent = 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å';
            }
        }
    }

    updateTestResults(testResults) {
        const resultsDiv = document.getElementById('results');
        const resultsContent = document.getElementById('results-content');
        
        if (!resultsDiv || !resultsContent) return;

        const isSuccess = testResults.success;
        const testsRun = this.parseTestResults(testResults.output);
        const formattedOutput = this.formatTestOutput(testResults.output);
        
        // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        let testResultsCard = resultsContent.querySelector('.test-results-card');
        
        const testResultsHtml = `
            <div class="result-card test-results-card">
                <div class="result-header">
                    <div class="result-title">üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</div>
                    <div class="result-status ${isSuccess ? 'status-success' : 'status-error'}">
                        ${isSuccess ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∏'}
                    </div>
                </div>
                
                <div class="test-results-grid">
                    <div class="test-stat stat-total">
                        <div class="test-stat-number">${testsRun.total}</div>
                        <div class="test-stat-label">–¢–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</div>
                    </div>
                    <div class="test-stat stat-success">
                        <div class="test-stat-number">${testsRun.passed}</div>
                        <div class="test-stat-label">–£—Å–ø–µ—à–Ω—ã—Ö</div>
                    </div>
                    <div class="test-stat stat-error">
                        <div class="test-stat-number">${testsRun.failed}</div>
                        <div class="test-stat-label">–ù–µ—É–¥–∞—á–Ω—ã—Ö</div>
                    </div>
                </div>
                
                ${formattedOutput ? `
                    <div class="test-output-container">
                        <div class="test-output-header">
                            <span class="test-output-title">üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥</span>
                            <button class="btn-small" onclick="testAgent.toggleTestOutput()" id="toggle-output-btn">
                                üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å
                            </button>
                        </div>
                        <div class="test-output collapsed" id="test-output">${formattedOutput}</div>
                    </div>
                ` : ''}
            </div>
        `;

        if (testResultsCard) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫
            testResultsCard.outerHTML = testResultsHtml;
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫
            resultsContent.insertAdjacentHTML('beforeend', testResultsHtml);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        resultsDiv.style.display = 'block';
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
function switchTab(tabName) {
    window.testAgent.switchTab(tabName);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    window.testAgent = new TestAgent();
});
