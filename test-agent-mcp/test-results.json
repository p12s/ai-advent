{"numFailedTestSuites":1,"numFailedTests":2,"numPassedTestSuites":0,"numPassedTests":12,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":1,"numTotalTests":14,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1755778912637,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["add function"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"add function should return the sum of two numbers","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return the sum of two numbers"},{"ancestorTitles":["add function"],"duration":3,"failureDetails":[{"matcherResult":{"message":"expect(received).toThrowError(expected)\n\nExpected substring: \"Wrong type\"\n\nReceived function did not throw","pass":false}}],"failureMessages":["Error: expect(received).toThrowError(expected)\n\nExpected substring: \"Wrong type\"\n\nReceived function did not throw\n    at Object.toThrowError (/app/test.test.js:22:31)\n    at Promise.then.completed (/app/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/app/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/app/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/app/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/app/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/app/node_modules/jest-circus/build/run.js:121:9)\n    at run (/app/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/app/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/app/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/app/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/app/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"add function should handle non-numeric inputs correctly","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle non-numeric inputs correctly"},{"ancestorTitles":["add function"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"add function should return the correct result for zero","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return the correct result for zero"},{"ancestorTitles":["add function"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"add function should return the correct result for negative numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return the correct result for negative numbers"},{"ancestorTitles":["multiply function"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"multiply function should return the product of two numbers when both are positive","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return the product of two numbers when both are positive"},{"ancestorTitles":["multiply function"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"multiply function should return the product of two numbers when one is zero","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return the product of two numbers when one is zero"},{"ancestorTitles":["multiply function"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"multiply function should return the product of two negative numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return the product of two negative numbers"},{"ancestorTitles":["multiply function"],"duration":0,"failureDetails":[{"matcherResult":{"message":"expect(received).toThrowError()\n\nReceived function did not throw","pass":false}}],"failureMessages":["Error: expect(received).toThrowError()\n\nReceived function did not throw\n    at Object.toThrowError (/app/test.test.js:52:36)\n    at Promise.then.completed (/app/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/app/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/app/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/app/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/app/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/app/node_modules/jest-circus/build/run.js:121:9)\n    at run (/app/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/app/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/app/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/app/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/app/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"multiply function should throw an error when passed a non-numeric value","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should throw an error when passed a non-numeric value"},{"ancestorTitles":["multiply function"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"multiply function should return the product of two large numbers","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return the product of two large numbers"},{"ancestorTitles":["divide function"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"divide function should throw an error when dividing by zero","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw an error when dividing by zero"},{"ancestorTitles":["divide function"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"divide function should return the correct result for a positive dividend and divisor","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return the correct result for a positive dividend and divisor"},{"ancestorTitles":["divide function"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"divide function should return the correct result for a negative dividend and positive divisor","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return the correct result for a negative dividend and positive divisor"},{"ancestorTitles":["divide function"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"divide function should return the correct result for a positive dividend and negative divisor","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return the correct result for a positive dividend and negative divisor"},{"ancestorTitles":["divide function"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"divide function should return the correct result for a negative dividend and negative divisor","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return the correct result for a negative dividend and negative divisor"}],"endTime":1755778912832,"message":"  ● add function › should handle non-numeric inputs correctly\n\n    expect(received).toThrowError(expected)\n\n    Expected substring: \"Wrong type\"\n\n    Received function did not throw\n\n      20 |\n      21 |   it('should handle non-numeric inputs correctly', () => {\n    > 22 |     expect(() => add('a', 2)).toThrowError('Wrong type');\n         |                               ^\n      23 |     expect(() => add(null, 2)).toThrowError('Wrong type');\n      24 |   });\n      25 |\n\n      at Object.toThrowError (test.test.js:22:31)\n\n  ● multiply function › should throw an error when passed a non-numeric value\n\n    expect(received).toThrowError()\n\n    Received function did not throw\n\n      50 |\n      51 |   it('should throw an error when passed a non-numeric value', () => {\n    > 52 |     expect(() => multiply('a', 3)).toThrowError();\n         |                                    ^\n      53 |     expect(() => multiply(2, 'b')).toThrowError();\n      54 |   });\n      55 |\n\n      at Object.toThrowError (test.test.js:52:36)\n","name":"/app/test.test.js","startTime":1755778912647,"status":"failed","summary":""}],"wasInterrupted":false,"coverageMap":{"/app/source.js":{"path":"/app/source.js","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":13}},"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":13}},"2":{"start":{"line":8,"column":0},"end":{"line":8,"column":49}},"3":{"start":{"line":8,"column":13},"end":{"line":8,"column":49}},"4":{"start":{"line":9,"column":0},"end":{"line":9,"column":13}},"5":{"start":{"line":12,"column":0},"end":{"line":12,"column":43}}},"fnMap":{"0":{"name":"add","decl":{"start":{"line":1,"column":9},"end":{"line":1,"column":12}},"loc":{"start":{"line":1,"column":19},"end":{"line":3,"column":1}},"line":1},"1":{"name":"multiply","decl":{"start":{"line":4,"column":9},"end":{"line":4,"column":17}},"loc":{"start":{"line":4,"column":24},"end":{"line":6,"column":1}},"line":4},"2":{"name":"divide","decl":{"start":{"line":7,"column":9},"end":{"line":7,"column":15}},"loc":{"start":{"line":7,"column":22},"end":{"line":10,"column":1}},"line":7}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":0},"end":{"line":8,"column":49}},"type":"if","locations":[{"start":{"line":8,"column":0},"end":{"line":8,"column":49}},{"start":{},"end":{}}],"line":8}},"s":{"0":6,"1":6,"2":5,"3":1,"4":4,"5":1},"f":{"0":6,"1":6,"2":5},"b":{"0":[1,4]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"446e9d4aee763e448eee49525222f8320ad4363d"}}}
