/**
 * Auto Test Sender Module - JavaScript Only
 * –ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö JavaScript —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ test-agent-mcp
 * 
 * @author AI Assistant
 * @version 1.0.0
 */

class AutoTestSender {
    constructor() {
        this.testAgentUrl = 'http://localhost:3006';
        this.lastSentFiles = new Map(); // –•—Ä–∞–Ω–∏—Ç —Ö–µ—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        this.isEnabled = true;
        this.autoTestEnabled = true;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    async init() {
        try {
            console.log('üîß Initializing Auto Test Sender (JavaScript only)...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å test-agent-mcp
            const isHealthy = await this.checkTestAgentHealth();
            if (!isHealthy) {
                console.warn('‚ö†Ô∏è Test Agent MCP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.');
                this.autoTestEnabled = false;
                return false;
            }
            
            console.log('‚úÖ Auto Test Sender initialized successfully');
            return true;
        } catch (error) {
            console.error('‚ùå Error initializing Auto Test Sender:', error);
            this.autoTestEnabled = false;
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è test-agent-mcp
     */
    async checkTestAgentHealth() {
        try {
            const response = await fetch(`${this.testAgentUrl}/health`);
            const result = await response.json();
            return result.status === 'ok';
        } catch (error) {
            console.error('‚ùå Test Agent health check failed:', error);
            return false;
        }
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö–µ—à–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
     */
    calculateHash(content) {
        let hash = 0;
        if (content.length === 0) return hash.toString();
        
        for (let i = 0; i < content.length; i++) {
            const char = content.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // Convert to 32bit integer
        }
        return hash.toString();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª
     */
    hasFileChanged(filePath, content) {
        const currentHash = this.calculateHash(content);
        const lastHash = this.lastSentFiles.get(filePath);
        
        if (lastHash !== currentHash) {
            this.lastSentFiles.set(filePath, currentHash);
            return true;
        }
        return false;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª JavaScript —Ñ–∞–π–ª–æ–º
     */
    isJavaScriptFile(filename) {
        return filename.endsWith('.js') || filename.endsWith('.mjs');
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ JavaScript –∫–æ–¥–∞ –≤ test-agent-mcp
     */
    async sendJavaScriptToTestAgent(code, filename) {
        try {
            console.log(`üß™ Sending ${filename} to Test Agent MCP...`);
            
            const response = await fetch(`${this.testAgentUrl}/api/test-code`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    code: code,
                    language: 'javascript',
                    filename: filename
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            
            if (result.success) {
                console.log(`‚úÖ ${filename} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Test Agent MCP`);
                return {
                    success: true,
                    data: result.result,
                    testData: result.testData
                };
            } else {
                throw new Error(result.error || 'Unknown error from Test Agent MCP');
            }
        } catch (error) {
            console.error(`‚ùå Error sending ${filename} to Test Agent MCP:`, error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ JavaScript —Ñ–∞–π–ª–∞ –≤ test-agent-mcp
     */
    async autoSendJavaScriptFile(filePath, content) {
        if (!this.autoTestEnabled) {
            console.log('‚ö†Ô∏è Auto testing is disabled');
            return null;
        }

        if (!this.isJavaScriptFile(filePath)) {
            console.log(`‚ö†Ô∏è File ${filePath} is not a JavaScript file, skipping auto test`);
            return null;
        }

        if (!this.hasFileChanged(filePath, content)) {
            console.log(`‚ÑπÔ∏è File ${filePath} has not changed, skipping auto test`);
            return null;
        }

        const filename = filePath.split('/').pop();

        console.log(`üöÄ Auto sending ${filename} to Test Agent MCP...`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        this.showAutoTestNotification(filename);

        const result = await this.sendJavaScriptToTestAgent(content, filename);
        
        if (result.success) {
            this.showTestResults(filename, result);
        } else {
            this.showTestError(filename, result.error);
        }

        return result;
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    showAutoTestNotification(filename) {
        const message = `üß™ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JavaScript —Ñ–∞–π–ª–∞ ${filename}...`;
        window.addMessage(message, false, false, 'System', 'testing');
    }

    /**
     * –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    showTestResults(filename, result) {
        const { data } = result;
        const testResults = data.testResults;
        const successRate = testResults.totalTests > 0 ? 
            Math.round((testResults.passedTests / testResults.totalTests) * 100) : 0;

        const resultMessage = `
‚úÖ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${filename} –∑–∞–≤–µ—Ä—à–µ–Ω–æ**

üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
- –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${testResults.totalTests}
- –ü—Ä–æ–π–¥–µ–Ω–æ: ${testResults.passedTests}
- –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${testResults.failedTests}
- –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%

${testResults.failedTests === 0 ? 'üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!' : '‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å'}
        `;

        window.addMessage(resultMessage, false, false, 'Agent4', 'testing');

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        const buttonContainer = document.createElement('div');
        buttonContainer.className = 'copy-container';
        
        const copyTestsButton = document.createElement('button');
        copyTestsButton.textContent = 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã';
        copyTestsButton.className = 'copy-plan-button';
        copyTestsButton.onclick = () => {
            navigator.clipboard.writeText(data.testCode).then(() => {
                copyTestsButton.textContent = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
                setTimeout(() => {
                    copyTestsButton.textContent = 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã';
                }, 2000);
            });
        };
        
        const viewReportButton = document.createElement('button');
        viewReportButton.textContent = 'üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç';
        viewReportButton.className = 'copy-plan-button';
        viewReportButton.style.marginLeft = '10px';
        viewReportButton.onclick = () => {
            const htmlReport = window.createTestReportHtml ? 
                window.createTestReportHtml(data) : 
                this.createSimpleTestReport(data);
            window.showFullPlanModal(htmlReport, '–û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ JavaScript');
        };
        
        buttonContainer.appendChild(copyTestsButton);
        buttonContainer.appendChild(viewReportButton);
        
        const testingMessages = document.getElementById('testing-messages');
        if (testingMessages) {
            testingMessages.appendChild(buttonContainer);
            testingMessages.scrollTop = testingMessages.scrollHeight;
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    showTestError(filename, error) {
        const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ${filename}: ${error}`;
        window.addMessage(errorMessage, false, false, 'System', 'testing');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ HTML –æ—Ç—á–µ—Ç–∞
     */
    createSimpleTestReport(data) {
        const { filename, testResults, testCode } = data;
        const timestamp = new Date().toLocaleString('ru-RU');
        const successRate = testResults.totalTests > 0 ? 
            Math.round((testResults.passedTests / testResults.totalTests) * 100) : 0;

        return `
# –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ JavaScript —Ñ–∞–π–ª–∞ ${filename}

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
- **–§–∞–π–ª:** ${filename}
- **–Ø–∑—ã–∫:** JavaScript
- **–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:** ${testResults.totalTests}
- **–ü—Ä–æ–π–¥–µ–Ω–æ:** ${testResults.passedTests}
- **–ü—Ä–æ–≤–∞–ª–µ–Ω–æ:** ${testResults.failedTests}
- **–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:** ${successRate}%

## –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
\`\`\`javascript
${testCode}
\`\`\`

---
*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${timestamp}*
        `;
    }

    /**
     * –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ JavaScript —Ñ–∞–π–ª–∞
     */
    async sendJavaScriptFile(filePath, content) {
        return await this.autoSendJavaScriptFile(filePath, content);
    }

    /**
     * –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ JavaScript –∫–æ–¥–∞
     */
    async sendJavaScriptCode(code, filename) {
        return await this.sendJavaScriptToTestAgent(code, filename);
    }

    /**
     * –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    setAutoTestEnabled(enabled) {
        this.autoTestEnabled = enabled;
        console.log(`üîÑ Auto testing ${enabled ? 'enabled' : 'disabled'}`);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
     */
    clearHistory() {
        this.lastSentFiles.clear();
        console.log('üóëÔ∏è Auto test history cleared');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const autoTestSender = new AutoTestSender();

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
window.autoTestSender = autoTestSender;

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ JavaScript —Ñ–∞–π–ª–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
 */
window.autoSendJavaScriptToTestAgent = async function(filePath, content) {
    return await autoTestSender.autoSendJavaScriptFile(filePath, content);
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ JavaScript —Ñ–∞–π–ª–∞
 */
window.sendJavaScriptFileToTestAgent = async function(filePath, content) {
    return await autoTestSender.sendJavaScriptFile(filePath, content);
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ JavaScript –∫–æ–¥–∞
 */
window.sendJavaScriptCodeToTestAgent = async function(code, filename) {
    return await autoTestSender.sendJavaScriptCode(code, filename);
};

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
window.initAutoTestSender = async function() {
    return await autoTestSender.init();
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
window.demoAutoTestSystem = async function() {
    console.log('üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JavaScript...');
    
    // –ü—Ä–∏–º–µ—Ä JavaScript –∫–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const demoCode = `
// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π JavaScript –º–æ–¥—É–ª—å
class MathUtils {
    static add(a, b) {
        return a + b;
    }
    
    static subtract(a, b) {
        return a - b;
    }
    
    static multiply(a, b) {
        return a * b;
    }
    
    static divide(a, b) {
        if (b === 0) {
            throw new Error('Division by zero');
        }
        return a / b;
    }
    
    static factorial(n) {
        if (n < 0) {
            throw new Error('Factorial is not defined for negative numbers');
        }
        if (n === 0 || n === 1) {
            return 1;
        }
        return n * this.factorial(n - 1);
    }
    
    static isPrime(number) {
        if (number < 2) return false;
        if (number === 2) return true;
        if (number % 2 === 0) return false;
        
        for (let i = 3; i <= Math.sqrt(number); i += 2) {
            if (number % i === 0) return false;
        }
        return true;
    }
}

module.exports = MathUtils;
    `;
    
    const filename = 'demo-math-utils.js';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    window.addMessage('üß™ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...', false, false, 'System', 'testing');
    
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ test-agent-mcp
        const result = await window.sendJavaScriptCodeToTestAgent(demoCode, filename);
        
        if (result && result.success) {
            window.addMessage('‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', false, false, 'System', 'testing');
            console.log('‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', result);
        } else {
            throw new Error(result?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        window.addMessage(`‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: ${error.message}`, false, false, 'System', 'testing');
    }
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è github-analysis.js
 */
window.testGitHubAnalysis = async function() {
    console.log('üß™ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ github-analysis.js...');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    window.addMessage('üß™ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è github-analysis.js...', false, false, 'System', 'testing');
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ github-analysis.js
        const response = await fetch('./github-analysis.js');
        const content = await response.text();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º github-analysis.js –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        const result = await window.autoSendJavaScriptToTestAgent('github-analysis.js', content);
        
        if (result && result.success) {
            window.addMessage('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ github-analysis.js –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!', false, false, 'System', 'testing');
            console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ github-analysis.js —É—Å–ø–µ—à–Ω–æ:', result);
        } else {
            throw new Error(result?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è github-analysis.js:', error);
        window.addMessage(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è github-analysis.js: ${error.message}`, false, false, 'System', 'testing');
    }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
if (typeof window !== 'undefined') {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(() => {
                window.initAutoTestSender();
            }, 1000); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
        });
    } else {
        setTimeout(() => {
            window.initAutoTestSender();
        }, 1000);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Node.js
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        AutoTestSender,
        autoTestSender
    };
}
