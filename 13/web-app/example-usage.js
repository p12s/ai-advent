/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Auto Test Sender –¥–ª—è JavaScript
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JavaScript –∫–æ–¥–∞
 */

// –ü—Ä–∏–º–µ—Ä 1: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ JavaScript —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
async function exampleAutoSendJavaScriptFile() {
    const filePath = 'example.js';
    const content = `
function add(a, b) {
    return a + b;
}

function multiply(a, b) {
    return a * b;
}

function divide(a, b) {
    if (b === 0) {
        throw new Error('Division by zero');
    }
    return a / b;
}

module.exports = { add, multiply, divide };
    `;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ test-agent-mcp
    const result = await window.autoSendJavaScriptToTestAgent(filePath, content);
    
    if (result && result.success) {
        console.log('‚úÖ JavaScript —Ñ–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω:', result);
    } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', result?.error);
    }
}

// –ü—Ä–∏–º–µ—Ä 2: –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ JavaScript –∫–æ–¥–∞
async function exampleManualSendJavaScriptCode() {
    const code = `
function factorial(n) {
    if (n <= 1) {
        return 1;
    }
    return n * factorial(n - 1);
}

function fibonacci(n) {
    if (n <= 1) {
        return n;
    }
    return fibonacci(n - 1) + fibonacci(n - 2);
}

function isPrime(number) {
    if (number < 2) return false;
    if (number === 2) return true;
    if (number % 2 === 0) return false;
    
    for (let i = 3; i <= Math.sqrt(number); i += 2) {
        if (number % i === 0) return false;
    }
    return true;
}

module.exports = { factorial, fibonacci, isPrime };
    `;
    
    const filename = 'math_functions.js';
    
    const result = await window.sendJavaScriptCodeToTestAgent(code, filename);
    
    if (result && result.success) {
        console.log('‚úÖ JavaScript –∫–æ–¥ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω:', result);
    } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', result?.error);
    }
}

// –ü—Ä–∏–º–µ—Ä 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º –∫–æ–¥–∞
function setupJavaScriptEditorIntegration() {
    // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞ —Å —Å–æ–±—ã—Ç–∏–µ–º onChange
    const codeEditor = document.getElementById('code-input');
    const filenameInput = document.getElementById('filename-input');
    
    if (codeEditor && filenameInput) {
        let debounceTimer;
        
        codeEditor.addEventListener('input', function() {
            clearTimeout(debounceTimer);
            
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            debounceTimer = setTimeout(async () => {
                const content = codeEditor.value;
                const filename = filenameInput.value;
                
                if (content.trim() && filename && filename.endsWith('.js')) {
                    console.log('üîÑ Auto testing JavaScript code...');
                    await window.autoSendJavaScriptToTestAgent(filename, content);
                }
            }, 3000);
        });
    }
}

// –ü—Ä–∏–º–µ—Ä 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JavaScript
function handleJavaScriptTestResults(result) {
    if (result.success) {
        const { data } = result;
        const { testResults, testCode } = data;
        
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JavaScript:');
        console.log(`- –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${testResults.totalTests}`);
        console.log(`- –ü—Ä–æ–π–¥–µ–Ω–æ: ${testResults.passedTests}`);
        console.log(`- –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${testResults.failedTests}`);
        
        if (testResults.failedTests === 0) {
            console.log('üéâ –í—Å–µ JavaScript —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ JavaScript —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å');
        }
        
        // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        console.log('üß™ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ JavaScript —Ç–µ—Å—Ç—ã:', testCode);
    }
}

// –ü—Ä–∏–º–µ—Ä 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ JavaScript —Ñ–∞–π–ª–∞
async function testSpecificJavaScriptFile() {
    const filePath = 'my-script.js';
    const content = `
// –ü—Ä–∏–º–µ—Ä JavaScript –º–æ–¥—É–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class Calculator {
    constructor() {
        this.history = [];
    }
    
    add(a, b) {
        const result = a + b;
        this.history.push(\`\${a} + \${b} = \${result}\`);
        return result;
    }
    
    subtract(a, b) {
        const result = a - b;
        this.history.push(\`\${a} - \${b} = \${result}\`);
        return result;
    }
    
    multiply(a, b) {
        const result = a * b;
        this.history.push(\`\${a} * \${b} = \${result}\`);
        return result;
    }
    
    divide(a, b) {
        if (b === 0) {
            throw new Error('Division by zero');
        }
        const result = a / b;
        this.history.push(\`\${a} / \${b} = \${result}\`);
        return result;
    }
    
    getHistory() {
        return this.history;
    }
    
    clearHistory() {
        this.history = [];
    }
}

module.exports = Calculator;
    `;
    
    const result = await window.sendJavaScriptFileToTestAgent(filePath, content);
    handleJavaScriptTestResults(result);
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.exampleAutoSendJavaScriptFile = exampleAutoSendJavaScriptFile;
window.exampleManualSendJavaScriptCode = exampleManualSendJavaScriptCode;
window.setupJavaScriptEditorIntegration = setupJavaScriptEditorIntegration;
window.handleJavaScriptTestResults = handleJavaScriptTestResults;
window.testSpecificJavaScriptFile = testSpecificJavaScriptFile;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (typeof window !== 'undefined') {
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(() => {
                setupJavaScriptEditorIntegration();
            }, 2000);
        });
    } else {
        setTimeout(() => {
            setupJavaScriptEditorIntegration();
        }, 2000);
    }
}
